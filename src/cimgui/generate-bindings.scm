(use-modules (ice-9 regex)
             (ice-9 pretty-print)
             (ice-9 textual-ports)
             (json)
             (system foreign))

(define ImVec2 (* 2 float))
(define ImVec4 (* 4 float))
(define ImRect (* 2 ImVec2))
(define bool unsigned-int)
(define char uint8)

(define-syntax-rule (array-adjust arg-type type)
  (let ((match (string-match "[0-9]+" arg-type)))
    (if match
        (* type (string->number (match:substring match)))
        'type)))

                                        ; (define imgui/create-context
                                        ;   (foreign-library-function cimgui
                                        ;                             "igCreateContext"
                                        ;                             #:return-type '*
                                        ;                             #:arg-types (list '*)))

(define (type->scm-type type)
  (if (eq? type '*)
      '(quote *)
      type))

(define (generate-function binding)
  `(define ,(string->symbol (assoc-ref binding "name"))
     (foreign-library-function cimgui
                               ,(assoc-ref binding "name")
                               #:return-type ,(type->scm-type (assoc-ref binding "return-type"))
                               #:arg-types (list ,@(map type->scm-type
                                                        (vector->list (assoc-ref binding "arg-types")))))))

(define (arg->type arg)
  (string->type (assoc-ref arg "type")))

(define (string->type arg-type)
  "Guile foreign types: https://www.gnu.org/software/guile/manual/html_node/Foreign-Types.html"
  (cond ((not arg-type)
         void)
        ((or (string-suffix? "*" arg-type)
             (string-suffix? "Callback" arg-type)
             (string=? "ImTextureID" arg-type))
         '*)
        ((or (string=? "unsigned int" arg-type)
             (string=? "ImGuiID" arg-type)
             (string=? "ImWchar32" arg-type))
         'unsigned-int)
        ((or (string=? "ImDrawIdx" arg-type)
             (string=? "ImWchar16" arg-type)
             (string=? "ImWchar" arg-type))
         'unsigned-short)
        ((string=? "bool" arg-type)
         'bool)
        ((string=? "double" arg-type)
         'double)
        ((string=? "ImU64" arg-type)
         'uint64)
        ((or (string-prefix? "int" arg-type)
             (string=? "ImGuiKey" arg-type)
             (string=? "ImPoolIdx" arg-type)
             (string=? "ImGuiMouseCursor" arg-type)
             (string=? "ImGuiMouseSource" arg-type)
             (string=? "ImGuiStyleVar" arg-type)
             (string=? "ImGuiDir" arg-type)
             (string-suffix? "Flags" arg-type))
         (array-adjust arg-type int))
        ((string=? "char" arg-type)
         'char)
        ((string-contains arg-type "float")
         (array-adjust arg-type float))
        ((string=? "size_t" arg-type)
         'size_t)
        ((string=? "ImU32" arg-type)
         'unsigned-int)
        ((string-suffix? "Flags" arg-type)
         'int)
        ((string-suffix? "ImVec2" arg-type)
         'ImVec2)
        ((string-suffix? "ImVec4" arg-type)
         'ImVec4)
        ((string-suffix? "ImRect" arg-type)
         'ImRect)
        ((string=? "void" arg-type)
         'void)
        (else
         (format #t "UNHANDLED TYPE: ~a~%" arg-type)
         -1)))

(define (arg-supported? arg)
  (let ((arg-name (assoc-ref arg "name"))
        (arg-type (assoc-ref arg "type")))
    (not (or (string=? "const T" arg-type)
             (string=? "va_list" arg-type)
             (string=? "..." arg-type)))))

(define (generate-binding binding)
  (let ((binding-name (car binding))
        (binding-data (vector-ref (cdr binding) 0)))
    (let* ((args (assoc-ref binding-data "argsT"))
           (return-type (assoc-ref binding-data "ret"))
           (arg-types (map-in-order arg->type
                                    (filter arg-supported?
                                            (vector->list args)))))
      `(("name" . ,binding-name)
        ("arg-types" . ,(list->vector arg-types))
        ("return-type" . ,(string->type return-type))))))

(define (generate-bindings bindings-file)
  (let* ((bindings (json->scm bindings-file))
         (generated (map generate-binding bindings)))
    (call-with-output-file "cimgui.scm.json"
      (lambda (output-file)
        (scm->json `(("cimgui" . ,(list->vector generated))) output-file)))
    (call-with-output-file "guile-cimgui.scm"
      (lambda (output-file)
        (pretty-print
         '(define-module (guile-cimgui)
            #:export (guile-cimgui/test)
            #:use-module (system foreign)
            #:use-module (system foreign-library)
            #:use-module ((rnrs) #:select (assert)))
         output-file)
        (format output-file "~%")
        (pretty-print
         '(define cimgui (dynamic-link (or (getenv "CIMGUI_LIBRARY_PATH")
                                           "cimgui")))
         output-file)
        (format output-file "~%")
        (pretty-print
         '(define (guile-cimgui/test)
            (format #t "[guile-cimgui] Testing guile-cimgui...~%")
            (assert cimgui)
            (format #t "[guile-cimgui] Tests finished successfully~%"))
         output-file)
        (format output-file "~%")
        (for-each (lambda (type)
                    (pretty-print type output-file))
                  `((define ImVec2 ,ImVec2)
                    (define ImVec4 ,ImVec4)
                    (define ImRect ,ImRect)
                    (define bool ,bool)
                    (define char ,char)))
        (format output-file "~%")
        (for-each (lambda (binding)
                    (pretty-print (generate-function binding) output-file)
                    (format output-file "~%"))
                  generated)))))

(call-with-input-file "cimgui.json" generate-bindings)
